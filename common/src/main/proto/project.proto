syntax = "proto3";
option java_multiple_files = true;
package org.elca.neosis.proto;

enum ProjectStatus {
  NEW = 0;
  PLA = 1;
  INP = 2;
  FIN = 3;
}

enum ResponseStatus {
  OPERATION_SUCCESS = 0;
  PROJECT_NUMBER_EXISTED = 1;
  EMPLOYEE_VISAS_NOT_EXISTED = 2;
  PROJECT_START_DATE_GREATER_THAN_END_DATE = 3;
  PROJECT_NUMBER_OUT_OF_RANGE = 4;
  PROJECT_NAME_OUT_OF_LENGTH = 5;
  PROJECT_CUSTOMER_OUT_OF_LENGTH = 6;
  CAN_NOT_CREATE_PROJECT = 7;
  CAN_NOT_UPDATE_PROJECT = 8;
  CAN_NOT_DELETE_PROJECT = 9;
  OTHER_ERROR = 10;
}

message Project {
  int64 id = 1;
  int32 number = 2;
  string name = 3;
  string customer = 4;
  int64 group_id = 5;
  repeated string members = 6;
  ProjectStatus status = 7;
  string start_date = 8;
  string end_date = 9;
  int32 version = 10;
  bool is_existed = 11;
}

// Request
message Empty {}

message ProjectNumberRequest {
  int32 number = 1;
}

message SearchCondition {
  string keywords = 1;
  bool have_status = 2;
  ProjectStatus status = 3;
  int32 page_size = 4;
  int32 page_number = 5;
}

message CreateProjectRequest {
  int32 number = 1;
  string name = 2;
  string customer = 3;
  int64 group_id = 4;
  repeated string members = 5;
  ProjectStatus status = 6;
  string start_date = 7;
  string end_date = 8;
}

message DeleteProjectRequest {
  repeated int32 number = 1;
}

message CountCondition {
  string keywords = 1;
  bool have_status = 2;
  ProjectStatus status = 3;
}

// Response
message SearchResult {
  int32 number = 1;
  string name = 2;
  string customer = 3;
  ProjectStatus status = 4;
  string start_date = 5;
}

message CreateProjectResponse {
  bool is_success = 1;
  repeated ResponseStatus status = 2;
  repeated string invalid_visa = 3;
}

message DeleteProjectResponse {
  bool is_success = 1;
  ResponseStatus status = 2;
}

message UpdateProjectResponse {
  bool is_success = 1;
  repeated ResponseStatus status = 2;
  repeated string invalid_visa = 3;
}

message CountProjectResponse {
  uint64 quantity = 1;
}

service ProjectService {
  rpc getAllProjects(Empty) returns (stream SearchResult);
  rpc getProjectByNumber(ProjectNumberRequest) returns (Project);
  rpc searchProject(SearchCondition) returns (stream SearchResult);
  rpc createProject(CreateProjectRequest) returns (CreateProjectResponse);
  rpc deleteProject(DeleteProjectRequest) returns (DeleteProjectResponse);
  rpc updateProject(Project) returns (UpdateProjectResponse);
  rpc countAllProjectWithConditions(CountCondition) returns (CountProjectResponse);
}